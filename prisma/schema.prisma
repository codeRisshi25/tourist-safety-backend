// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model tourist {
  id               String         @id @default(uuid()) @db.Uuid
  fullName         String
  phoneNumber      String         @unique
  email            String?        @unique
  nationality      String?
  kycData          Json?          @db.JsonB
  emergencyContact Json?          @db.JsonB
  safetyScore      Int            @default(100)
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  itineraries      itinerary[]
  locationPings    location_ping[]
  alerts           alert[]
  blockchainId     blockchain_id? // Corrected: One-to-one relation
  iotDevices       iot_device[]
}

model itinerary {
  id        BigInt   @id @default(autoincrement())
  touristId String   @db.Uuid
  tripName  String
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  details   Json?    @db.JsonB
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  tourist   tourist  @relation(fields: [touristId], references: [id], onDelete: Cascade)
}

model location_ping {
  id             BigInt   @id @default(autoincrement())
  touristId      String   @db.Uuid
  location       Unsupported("geometry(Point,4326)")
  accuracyMeters Float?
  speedMps       Float?
  timestamp      DateTime @db.Timestamptz(6)
  tourist        tourist  @relation(fields: [touristId], references: [id], onDelete: Cascade)
}

model geofenced_zone {
  id        Int       @id @default(autoincrement())
  zoneName  String
  zoneType  String
  area      Unsupported("geometry(Polygon,4326)")
  isActive  Boolean   @default(true)
  createdBy String?   @db.Uuid
  alerts    alert[]
  creator   authority? @relation("CreatedZones", fields: [createdBy], references: [id])
}

model alert {
  id         BigInt       @id @default(autoincrement())
  touristId  String       @db.Uuid
  zoneId     Int?
  alertType  alert_type
  status     alert_status @default(active)
  location   Unsupported("geometry(Point,4326)")
  details    Json?        @db.JsonB
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  resolvedAt DateTime?    @db.Timestamptz(6)
  resolvedBy String?      @db.Uuid
  tourist    tourist      @relation(fields: [touristId], references: [id], onDelete: Cascade)
  zone       geofenced_zone? @relation(fields: [zoneId], references: [id])
  resolver   authority?   @relation("ResolvedAlerts", fields: [resolvedBy], references: [id])
}

model authority {
  id             String           @id @default(uuid()) @db.Uuid
  fullName       String
  email          String           @unique
  role           String
  precinctId     Int?
  isActive       Boolean          @default(true)
  createdZones   geofenced_zone[] @relation("CreatedZones")
  resolvedAlerts alert[]          @relation("ResolvedAlerts")
}

model blockchain_id {
  id                   BigInt   @id @default(autoincrement())
  touristId            String   @unique @db.Uuid
  walletAddress        String   @unique
  issuanceTxHash       String   @unique
  smartContractAddress String
  issuedAt             DateTime @db.Timestamptz(6)
  expiresAt            DateTime @db.Timestamptz(6)
  tourist              tourist  @relation(fields: [touristId], references: [id], onDelete: Cascade)
}

model iot_device {
  id           Int            @id @default(autoincrement())
  deviceUid    String         @unique
  touristId    String         @db.Uuid
  deviceType   String?
  batteryLevel Int?
  lastSeen     DateTime?      @db.Timestamptz(6)
  tourist      tourist        @relation(fields: [touristId], references: [id], onDelete: Cascade)
  healthVitals health_vital[]
}

model health_vital {
  id        BigInt   @id @default(autoincrement())
  deviceId  Int
  heartRate Int?
  timestamp DateTime @db.Timestamptz(6)
  device    iot_device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

enum alert_type {
  panic
  geofence_entry
  inactivity
  ai_anomaly
  health_vital
}

enum alert_status {
  active
  acknowledged
  resolved
  false_alarm
}